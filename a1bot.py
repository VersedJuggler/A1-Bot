from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import F
from aiogram.types import ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv('TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ü–µ–ª–µ–π –æ–±—Ä–∞—â–µ–Ω–∏—è
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–±—è")],
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")],
        [KeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É")],
        [KeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å –∏–ø–æ—Ç–µ–∫—É")],
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —ç—Ç–∞–ø–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è "–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–±—è"
buy_time_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í –±–ª–∏–∂–∞–π—à–∏–µ 2 –º–µ—Å—è—Ü–∞")],
        [KeyboardButton(text="–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ–ª—É–≥–æ–¥–∞")],
        [KeyboardButton(text="–¢–æ–ª—å–∫–æ –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é")],
    ],
    resize_keyboard=True
)

city_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞–∑–∞–Ω—å")],
        [KeyboardButton(text="–ú–æ—Å–∫–≤–∞")],
        [KeyboardButton(text="–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
        [KeyboardButton(text="–°–æ—á–∏")],
    ],
    resize_keyboard=True
)

flat_type_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°—Ç—É–¥–∏—è")],
        [KeyboardButton(text="1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è")],
        [KeyboardButton(text="2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è")],
        [KeyboardButton(text="3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è")],
        [KeyboardButton(text="4-–∫–æ–º–Ω—Ç–∞–Ω–∞—è")],
        [KeyboardButton(text="5-–∫–æ–º–Ω–∞—Ç–Ω–∞—è")],
        [KeyboardButton(text="–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è")],
    ],
    resize_keyboard=True
)

first_payment_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="500 —Ç—ã—Å - 1 –º–ª–Ω")],
        [KeyboardButton(text="1 –º–ª–Ω - 3 –º–ª–Ω")],
        [KeyboardButton(text="–°–≤—ã—à–µ 3 –º–ª–Ω")],
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
phone_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
    ],
    resize_keyboard=True
)

user_states = {}

async def send_welcome(message: types.Message):
    user = message.from_user
    welcome_text = (
        f"*{user.first_name}*, —Ä–∞–¥—ã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –ø–æ–º–æ—á—å —Å —Ä–µ—à–µ–Ω–∏–µ–º –í–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!\n\n"
        "–í—ã –≤ –±–æ—Ç–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ A1 Brokers Group, –Ω–æ —Ç—É—Ç –Ω–∞ —Å–≤—è–∑–∏ –∂–∏–≤—ã–µ –ª—é–¥–∏üëãüèº\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –í–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ –∑–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–∏–º—Å—è –º—ã!\n\n"
        "–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è? üëáüèº"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard, parse_mode="Markdown")
    user_states[user.id] = {"step": None, "data": {}}

async def handle_main_choice(message: types.Message):
    user = message.from_user
    if message.text == "–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–±—è":
        user_states[user.id] = {"step": 1, "data": {"purpose": "–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–±—è"}}
        await message.answer("–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?", reply_markup=buy_time_keyboard)
    elif message.text == "–ö—É–ø–∏—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
        user_states[user.id] = {"step": 101, "data": {"purpose": "–ö—É–ø–∏—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"}}
        await message.answer("–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?", reply_markup=buy_time_keyboard)
    elif message.text in ["–ü—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", "–û–¥–æ–±—Ä–∏—Ç—å –∏–ø–æ—Ç–µ–∫—É"]:
        user_states[user.id] = {"step": 201, "data": {"purpose": message.text}}
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–π –¥–ª—è –í–∞—Å –æ—Ç–≤–µ—Ç –∏ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ",
            reply_markup=ReplyKeyboardRemove()
        )

async def handle_buy_time(message: types.Message):
    user = message.from_user
    if user.id not in user_states or user_states[user.id].get("step") != 1:
        return
    user_states[user.id]["data"]["buy_time"] = message.text
    user_states[user.id]["step"] = 2
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∏—â–µ—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å?", reply_markup=city_keyboard)

async def handle_city(message: types.Message):
    user = message.from_user
    if user.id not in user_states or user_states[user.id].get("step") != 2:
        return
    user_states[user.id]["data"]["city"] = message.text
    user_states[user.id]["step"] = 3
    await message.answer("–ö–∞–∫—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å?", reply_markup=flat_type_keyboard)

async def handle_flat_type(message: types.Message):
    user = message.from_user
    if user.id not in user_states or user_states[user.id].get("step") != 3:
        return
    user_states[user.id]["data"]["flat_type"] = message.text
    user_states[user.id]["step"] = 4
    await message.answer("–ö–∞–∫–æ–π –ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤–Ω–æ—Å–∏—Ç—å?", reply_markup=first_payment_keyboard)

async def handle_first_payment(message: types.Message):
    user = message.from_user
    if user.id not in user_states or user_states[user.id].get("step") != 4:
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username
    if not user.username and user_states[user.id]["data"].get("phone") is None:
        user_states[user.id]["step"] = 5
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=phone_keyboard)
        return
    user_states[user.id]["data"]["first_payment"] = message.text
    user_states[user.id]["step"] = None
    thank_text = (
        f"*{user.first_name}*, —Å–ø–∞—Å–∏–±–æ!\n\n"
        "–ü–µ—Ä–µ–¥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –æ–±—Å—É–¥–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!\n\n"
        "–ù–∞—à –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 09 –¥–æ 21—á –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"
    )
    await message.answer(thank_text, reply_markup=main_menu_keyboard, parse_mode="Markdown")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    manager_ids = [6413686861, 762315344]
    data = user_states[user.id]["data"]
    username = user.username or "-"
    info = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{username}) ({user.id})\n"
        f"–¶–µ–ª—å: –ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–±—è\n"
        f"–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∫—É: {data.get('buy_time')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('flat_type')}\n"
        f"–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å: {data.get('first_payment')}"
        + (f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}" if data.get('phone') else "")
    )
    for manager_id in manager_ids:
        await bot.send_message(manager_id, info)

async def handle_first_payment_invest(message: types.Message):
    user = message.from_user
    if user.id not in user_states or user_states[user.id].get("step") != 104:
        return
    if not user.username and user_states[user.id]["data"].get("phone") is None:
        user_states[user.id]["step"] = 105
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=phone_keyboard)
        return
    user_states[user.id]["data"]["first_payment"] = message.text
    user_states[user.id]["step"] = None
    thank_text = (
        f"*{user.first_name}*, —Å–ø–∞—Å–∏–±–æ!\n\n"
        "–ü–µ—Ä–µ–¥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –æ–±—Å—É–¥–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!\n\n"
        "–ù–∞—à –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 09 –¥–æ 21—á –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"
    )
    await message.answer(thank_text, reply_markup=main_menu_keyboard, parse_mode="Markdown")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    manager_ids = [6413686861, 762315344]
    data = user_states[user.id]["data"]
    username = user.username or "-"
    info = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{username}) ({user.id})\n"
        f"–¶–µ–ª—å: –ö—É–ø–∏—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
        f"–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∫—É: {data.get('buy_time')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã: {data.get('flat_type')}\n"
        f"–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å: {data.get('first_payment')}"
        + (f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}" if data.get('phone') else "")
    )
    for manager_id in manager_ids:
        await bot.send_message(manager_id, info)

async def handle_phone(message: types.Message):
    user = message.from_user
    step = user_states.get(user.id, {}).get("step")
    if step not in [5, 105]:
        return
    phone = None
    if message.contact and message.contact.phone_number:
        phone = message.contact.phone_number
    elif message.text and message.text.startswith("+"):
        phone = message.text
    if not phone:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    user_states[user.id]["data"]["phone"] = phone
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è
    if step == 5:
        await handle_first_payment(message)
    elif step == 105:
        await handle_first_payment_invest(message)

async def handle_free_text(message: types.Message):
    user = message.from_user
    if user.id not in user_states or user_states[user.id].get("step") != 201:
        return
    user_states[user.id]["data"]["request_text"] = message.text
    user_states[user.id]["step"] = None
    thank_text = (
        f"*{user.first_name}*, —Å–ø–∞—Å–∏–±–æ!\n\n"
        "–ü–µ—Ä–µ–¥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –æ–±—Å—É–¥–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!\n\n"
        "–ù–∞—à –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 09 –¥–æ 21—á –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"
    )
    await message.answer(thank_text, reply_markup=main_menu_keyboard, parse_mode="Markdown")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É
    manager_id = 6413686861
    data = user_states[user.id]["data"]
    username = user.username or "-"
    info = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{username}) ({user.id})\n"
        f"–¶–µ–ª—å: {data.get('purpose')}\n"
        f"–ó–∞–ø—Ä–æ—Å: {data.get('request_text')}"
    )
    await bot.send_message(manager_id, info)

async def cmd_start(message: types.Message):
    await send_welcome(message)

async def buy_flat_for_self(message: types.Message):
    await handle_main_choice(message)

async def buy_flat_for_investment(message: types.Message):
    await handle_main_choice(message)

async def sell_flat(message: types.Message):
    await handle_main_choice(message)

async def approve_mortgage(message: types.Message):
    await handle_main_choice(message)

async def process_buy_time(message: types.Message):
    user = message.from_user
    if user.id not in user_states:
        return
    purpose = user_states[user.id].get("data", {}).get("purpose")
    if purpose == "–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–±—è":
        await handle_buy_time(message)
    elif purpose == "–ö—É–ø–∏—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
        await handle_buy_time_invest(message)

async def process_city(message: types.Message):
    user = message.from_user
    if user.id not in user_states:
        return
    purpose = user_states[user.id].get("data", {}).get("purpose")
    if purpose == "–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–±—è":
        await handle_city(message)
    elif purpose == "–ö—É–ø–∏—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
        await handle_city_in–≤–µ—Å—Ç(message)

async def process_flat_type(message: types.Message):
    user = message.from_user
    if user.id not in user_states:
        return
    purpose = user_states[user.id].get("data", {}).get("purpose")
    if purpose == "–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–±—è":
        await handle_flat_type(message)
    elif purpose == "–ö—É–ø–∏—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
        await handle_flat_type_invest(message)

async def process_first_payment(message: types.Message):
    user = message.from_user
    if user.id not in user_states:
        return
    purpose = user_states[user.id].get("data", {}).get("purpose")
    if purpose == "–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–±—è":
        await handle_first_payment(message)
    elif purpose == "–ö—É–ø–∏—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
        await handle_first_payment_invest(message)

async def echo_all(message: types.Message):
    user = message.from_user
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await send_welcome(message)
        return
    if user.id not in user_states:
        return
    step = user_states[user.id].get("step")
    if step == 201:
        await handle_free_text(message)
    else:
        await message.answer("–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—Å. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å?")

# –í —Å–∞–º–æ–º –Ω–∏–∑—É —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –∑–∞–ø—É—Å–∫ polling
async def main():
    from aiogram import Router
    router = Router()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    router.message.register(cmd_start, F.text == "/start")
    router.message.register(buy_flat_for_self, F.text == "–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–±—è")
    router.message.register(buy_flat_for_investment, F.text == "–ö—É–ø–∏—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
    router.message.register(sell_flat, F.text == "–ü—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É")
    router.message.register(approve_mortgage, F.text == "–û–¥–æ–±—Ä–∏—Ç—å –∏–ø–æ—Ç–µ–∫—É")
    router.message.register(process_buy_time, F.text.in_(["–í –±–ª–∏–∂–∞–π—à–∏–µ 2 –º–µ—Å—è—Ü–∞", "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ–ª—É–≥–æ–¥–∞", "–¢–æ–ª—å–∫–æ –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é"]))
    router.message.register(process_city, F.text.in_(["–ö–∞–∑–∞–Ω—å", "–ú–æ—Å–∫–≤–∞", "–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–°–æ—á–∏"]))
    router.message.register(process_flat_type, F.text.in_(["–°—Ç—É–¥–∏—è", "1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "4-–∫–æ–º–Ω—Ç–∞–Ω–∞—è", "5-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è"]))
    router.message.register(process_first_payment, F.text.in_(["500 —Ç—ã—Å - 1 –º–ª–Ω", "1 –º–ª–Ω - 3 –º–ª–Ω", "–°–≤—ã—à–µ 3 –º–ª–Ω"]))
    router.message.register(echo_all)
    router.message.register(handle_phone, F.contact | (F.text.regexp(r"^\\+\\d{10,15}$")))
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
